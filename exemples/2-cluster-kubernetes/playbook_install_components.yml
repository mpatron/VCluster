---
- hosts: node0
  become: yes

  vars_files:
    - vars/main.yml

  tasks:

    # Afin d'utiliser le module kubernetes.core, il faut le module pip kubernetes sur la cible pour qu'il puisse s'exécuter (et pip).
    - name: "[Ansible module kubernetes] Ensure PIP3 is installed."
      apt:
        name:
          - python3-pip
        state: present
    - name: "[Ansible module kubernetes] Install kubernetes python package on version 21.7.0"
      pip:
        name: kubernetes
    # Installation du plugins helm diff pour faciliter les upgrades
    - name: "[Ansible module kubernetes] Install Helm diff plugin"
      kubernetes.core.helm_plugin:
        plugin_path: https://github.com/databus23/helm-diff
        state: present

    # #########################################################################
    # Installation de metallb    
    # Enregistrement de son repo helm
    - name: "[MetalLB] Add metallb chart repo"
      kubernetes.core.helm_repository:
        name: metallb
        repo_url: "https://metallb.github.io/metallb"
    # Création d'un namespace pour metallb
    - name: "[MetalLB] Create a k8s namespace"
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: Namespace
        name: metallb-system
     # Installation de metallb sur la cible avec helm à partir de son fichier de configuration
    - name: "[MetalLB] Deploy latest version of metallb chart inside metallb-system namespace with values"
      kubernetes.core.helm:
        name: metallb
        chart_ref: metallb/metallb
        release_namespace: metallb-system
        update_repo_cache: true
        values: "{{ lookup('template', 'metallb_values.yml') | from_yaml }}"
    # #########################################################################

    # #########################################################################
    # Installation de prometheus    
    # Enregistrement de son repo helm
    - name: "[Provisionning] Add prometheus chart repo"
      kubernetes.core.helm_repository:
        name: bitnami
        repo_url: "https://charts.bitnami.com/bitnami"
    # Création d'un namespace pour metallb
    - name: "[Provisionning] Create a k8s namespace"
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: Namespace
        name: monitoring
     # Installation de metallb sur la cible avec helm à partir de son fichier de configuration
    - name: "[Provisionning] Deploy latest version of prometheus chart inside monitoring namespace with values"
      kubernetes.core.helm:
        name: prometheus
        chart_ref:  bitnami/kube-prometheus
        release_namespace: monitoring
        update_repo_cache: true
        values: "{{ lookup('template', 'prometheus_values.yml') | from_yaml }}"
    # #########################################################################

    # #########################################################################
    # Installation de grafana    
    # Enregistrement de son repo helm
    - name: "[Provisionning] Add grafana chart repo"
      kubernetes.core.helm_repository:
        name: bitnami
        repo_url: "https://charts.bitnami.com/bitnami"
    # Création d'un namespace pour grafana
    - name: "[Provisionning] Create a k8s namespace"
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: Namespace
        name: monitoring
    # Création d'un pvc pour grafana
#    - name: "[Provisionning] Create a k8s PVC for grafana"
#      kubernetes.core.k8s:
#        kind: PersistentVolumeClaim
#        state: present
#        definition:
#          apiVersion: v1
#          kind: PersistentVolumeClaim
#          metadata:
#            name: grafana
#            namespace: monitoring
#            labels:
#              storage.k8s.io/name: nfs
#              storage.k8s.io/part-of: monitoring
#          spec:
#            accessModes:
#              - ReadWriteMany
#            storageClassName: nfs-client
#            resources:
#              requests:
#                storage: 10Gi
     # Installation de grafana sur la cible avec helm à partir de son fichier de configuration
    - name: "[Provisionning] Deploy latest version of grafana chart inside monitoring namespace with values"
      kubernetes.core.helm:
        name: grafana
        chart_ref:  bitnami/grafana
        release_namespace: monitoring
        update_repo_cache: true
        values: "{{ lookup('template', 'grafana_values.yml') | from_yaml }}"
    # #########################################################################
