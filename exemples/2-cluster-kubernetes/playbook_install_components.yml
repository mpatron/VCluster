---
- hosts: node0
  become: yes

  vars_files:
    - vars/main.yml

  tasks:

    # Afin d'utiliser le module kubernetes.core, il faut le module pip kubernetes sur la cible pour qu'il puisse s'exécuter (et pip).
    - name: "[Ansible module kubernetes] Ensure PIP3 is installed."
      apt:
        name:
          - python3-pip
        state: present
    - name: "[Ansible module kubernetes] Install kubernetes python package on version 21.7.0"
      pip:
        name: kubernetes
    # Installation du plugins helm diff pour faciliter les upgrades
    - name: "[Ansible module kubernetes] Install Helm diff plugin"
      kubernetes.core.helm_plugin:
        plugin_path: https://github.com/databus23/helm-diff
        state: present

    # #########################################################################
    # Installation de metallb pour exposer les service sur des IP externe au cluster kubernetes
    # Enregistrement de son repo helm
    - name: "[MetalLB] Add metallb chart repo"
      kubernetes.core.helm_repository:
        name: metallb
        repo_url: "https://metallb.github.io/metallb"
    # Création d'un namespace pour metallb
    - name: "[MetalLB] Create a k8s namespace"
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: Namespace
        name: metallb-system
     # Installation de metallb sur la cible avec helm à partir de son fichier de configuration
    - name: "[MetalLB] Deploy latest version of metallb chart inside metallb-system namespace with values"
      kubernetes.core.helm:
        name: metallb
        chart_ref: metallb/metallb
        namespace: metallb-system
        update_repo_cache: true
        values: "{{ lookup('template', 'metallb_values.yml') | from_yaml }}"
    # #########################################################################

    # #########################################################################
    # Installation de prometheus comme concentrateur de log
    # Enregistrement de son repo helm
    - name: "[Provisionning] Add prometheus chart repo"
      kubernetes.core.helm_repository:
        name: bitnami
        repo_url: "https://charts.bitnami.com/bitnami"
    # Création d'un namespace pour metallb
    - name: "[Provisionning] Create a k8s namespace"
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: Namespace
        name: monitoring
     # Installation de metallb sur la cible avec helm à partir de son fichier de configuration
    - name: "[Provisionning] Deploy latest version of prometheus chart inside monitoring namespace with values"
      kubernetes.core.helm:
        name: prometheus
        chart_ref:  bitnami/kube-prometheus
        namespace: monitoring
        update_repo_cache: true
        values: "{{ lookup('template', 'prometheus_values.yml') | from_yaml }}"
    # #########################################################################

    # #########################################################################
    # Installation de grafana comme UI de visualisation de log récupéré par prometheus
    # Enregistrement de son repo helm
    - name: "[Provisionning] Add grafana chart repo"
      kubernetes.core.helm_repository:
        name: bitnami
        repo_url: "https://charts.bitnami.com/bitnami"
    # Création d'un namespace pour grafana
    - name: "[Provisionning] Create a k8s namespace"
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: Namespace
        name: monitoring
     # Installation de grafana sur la cible avec helm à partir de son fichier de configuration
    - name: "[Provisionning] Deploy latest version of grafana chart inside monitoring namespace with values"
      kubernetes.core.helm:
        name: grafana
        chart_ref:  bitnami/grafana
        namespace: monitoring
        update_repo_cache: true
        values: "{{ lookup('template', 'grafana_values.yml') | from_yaml }}"
    # echo "User: admin"
    # echo "Password: $(kubectl get secret grafana-admin --namespace monitoring -o jsonpath="{.data.GF_SECURITY_ADMIN_PASSWORD}" | base64 --decode)"
    - name: Grafana search admin password
      ansible.builtin.command: 
        cmd: bash -c "kubectl get secret --namespace monitoring grafana-admin -o jsonpath='{.data.GF_SECURITY_ADMIN_PASSWORD}' | base64 --decode"
      register: grafanaPassword
    - name: Grafana Port
      ansible.builtin.command: 
        cmd: bash -c "kubectl get services --namespace monitoring grafana -o jsonpath='{.spec.ports[0].port}'"
      register: grafanaPort
    - name: Grafana Address
      ansible.builtin.command: 
        cmd: bash -c "kubectl get services --namespace monitoring grafana -o jsonpath='{.status.loadBalancer.ingress[0].ip}'"
      register: grafanaAddress
    - name: Prints admin  and password
      ansible.builtin.debug:
        msg: "Url : http://{{ grafanaAddress.stdout }}:{{ grafanaPort.stdout }} Grafana Admin  admin / {{ grafanaPassword.stdout }}"
    # Il existe un bug où le mot de passe en mémoire de grafana n'est pas synchro avec l'authentification. Alors à la main
    # kubectl get secret -n monitoring grafana-admin -o jsonpath="{.data.GF_SECURITY_ADMIN_PASSWORD}" | base64 --decode ; echo
    # pour récupérer le bon
    # puis à la console faire :
    # kubectl exec -it -n monitoring grafana-5b65844779-r4pnk -- bash
    # Puis dans le pods faire (la variable existe dans le pod et doit être le bon mot de passe)
    # grafana-cli admin reset-admin-password $GF_SECURITY_ADMIN_PASSWORD  
    # puis dans l'iHM ajouter à la main la source prometheus
    # echo "http://"$(kubectl get service -n monitoring prometheus-kube-prometheus-prometheus -o jsonpath="{.status.loadBalancer.ingress[0].ip}"):9090
    # Puis configurer avec le dashboard kubernetes
    # https://grafana.com/api/dashboards/7249/revisions/1/download  
    # #########################################################################

    # #########################################################################
    # Installation de minio pour fournir une sortie au format S3 branché sur le StorageClass i.e. NFS
    # Enregistrement de son repo helm
    - name: "[Provisionning] Add minio chart repo"
      kubernetes.core.helm_repository:
        name: bitnami
        repo_url: "https://charts.bitnami.com/bitnami"
    # Création d'un namespace pour minio
    - name: "[Provisionning] Create a k8s namespace"
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: Namespace
        name: persisting
     # Installation de minio sur la cible avec helm à partir de son fichier de configuration
    - name: "[Provisionning] Deploy latest version of minio chart inside persisting namespace with values"
      kubernetes.core.helm:
        name: minio
        chart_ref:  bitnami/minio
        namespace: persisting
        update_repo_cache: true
        values: "{{ lookup('template', 'minio_values.yml') | from_yaml }}"
    # kubectl get secret --namespace persisting minio -o jsonpath="{.data.root-user}" | base64 --decode
    # kubectl get secret --namespace persisting minio -o jsonpath="{.data.root-password}" | base64 --decode
    - name: Minio search admin user
      ansible.builtin.command: 
        cmd: bash -c "kubectl get secret --namespace persisting minio -o jsonpath='{.data.root-user}' | base64 --decode"
      register: minioUser
    - name: Minio search admin password
      ansible.builtin.command:
        cmd: bash -c "kubectl get secret --namespace persisting minio -o jsonpath='{.data.root-password}' | base64 --decode"
      register: minioPassword
    - name: Minio Port
      ansible.builtin.command: 
        cmd: bash -c "kubectl get services --namespace persisting minio -o jsonpath='{.spec.ports[0].port}'"
      register: minioPort
    - name: Minio Address
      ansible.builtin.command: 
        cmd: bash -c "kubectl get services --namespace persisting minio -o jsonpath='{.status.loadBalancer.ingress[0].ip}'"
      register: minioAddress
    - name: Prints minio-user and minio-password
      ansible.builtin.debug:
        msg: "Url : http://{{ minioAddress.stdout }}:{{ minioPort.stdout }} Minio Admin  {{ minioUser.stdout }} / {{ minioPassword.stdout }}"
    # #########################################################################

